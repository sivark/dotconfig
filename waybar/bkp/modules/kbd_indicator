#!/bin/bash
# 
# Author: Joachim Bauernberger <joachim.bauernberger@protonmail.com>
#
# ##
# ## tests to get a keyboard indicator in Wayland/Waybar on the cheap.
# ##
#
# Description: This script doesn't work. The idea was to have a udev rule
# that monitors the paths in /sys/class as below and run 
# `pkill -HUP kbd_indicator` whenever there is a change in value
# - however the leds subsystem does not cause an interrupt to be fired for
# these events and so the udev rule never executes. An alternative for getting
# the below to work is simply poll the path every second using sleep(1) but
# that is pure overkill and poor use of systems resourcs.
# Because you can't get notifications using poll(2)/select(2) in C on 
# regular files ...
# My second attempt was to write an inotify(7) program which monitors the path
# - however as the inotify documentation says it does not work on 
# /proc and /sys/class or networked filesystems ...
# 
# The actual (and only clean) solution would therefore be by using the
# libxkbcommon code ...

sys_numlock=/sys/class/leds/input0\:\:numlock/brightness
sys_capslock=/sys/class/leds/input0\:\:capslock/brightness
sys_scrolllock=/sys/class/leds/input0\:\:scrolllock/brightness

function wait_for_event() {
  sleep infinity & PID=$!

  #echo "triggered" >> ~/triggered_
  numlock_str=
  capslock_str=
  scrolllock_str=
  class=none
  text=
  numlock=`cat $sys_numlock`
  capslock=`cat $sys_capslock`
  scrolllock=`cat $sys_scrolllock`

  if [ $capslock -eq 1 ]; then
    capslock_str="CapsLock"
    class=""
  fi

  if [ $numlock -eq 1 ]; then
    numlock_str="NumLock"
    class=""
  fi

  if [ $scrolllock -eq 1 ]; then
    scrolllock_str="ScrollLock"
    class=""
  fi

  if [ -z "$class" ]; then
    text="$capslock_str $numlock_str $scrolllock_str"
  fi

  jq -c -M -n \
    --arg text "$text" \
    --arg class "$class" \
    '{text: $text, class: $class}'


#  jq -c -M -n \
#    --arg text "indicator" \
#    --arg capslock $capslock \
#    --arg numlock $numlock \
#    --arg scrolllock $scrolllock \
#    '{text: $text, capslock: $capslock, numlock: $numlock, scrolllock: $scrolllock}'

  wait
}

trap "wait_for_event" HUP
wait_for_event

exit 0
